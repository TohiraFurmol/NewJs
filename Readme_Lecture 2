What is a scope in js ?
The scope is the current context of execution in which values and expressions
are "visible" or can be referenced. If a variable or expression is not in the current
scope, it will not be available for use. Scopes can also be layered in a hierarchy, 
so that child scopes have access to parent scopes, but not vice versa.

JavaScript has the following kinds of scopes:
• Global scope: The default scope for all code running in script mode.
• Function scope: The scope created with a function.
Block scope: This scope restricts the variable that is declared 
inside a specific block, from access by the outside of the block.
• Module scope: The scope for code running in module mode.

Hoisting in java script :
Hoisting is a JavaScript mechanism where variables and function 
declarations are moved to the top of their scope before code 
execution.

Hoisting in JavaScript is a behavior in which a function or a variable 
can be used before declaration.

Hoisting – Variable (var) :
There’s a temptation to think that all of the code you see in a 
JavaScript
program is interpreted line-by-line, top-down in order, as the program
execute. While that is essentially true, there’s one part of that as‐
assumption that can lead to incorrect thinking about your program


Hoisting – function declaration :
So, one way of thinking, sort of metaphorically, about this process, is that variable and 
function
declarations are “moved” from where they appear in the flow of the code to the top of the 
code. This gives rise to the name hoisting.

What is Recursion : 
Recursion is when a function calls itself until someone stops it. If no one stops it then it'll 
recurse (call itself) forever. Recursive functions let you perform a unit of work multiple times.
Modern programming languages like JavaScript already have the for and while statements as
alternatives to recursive functions. But some languages like Closure do not have any looping
statements, so you need to use recursion to repeatedly execute a piece of code

A recursive function must have a condition to stop calling itself. Otherwise, the 
function is called indefinitely.
Once the condition is met, the function stops calling itself. This is called the base 
condition.
To prevent infinite recursion, you can use if...else statement (or similar approach) 
where one branch makes the recursive call, and the other doesn't
